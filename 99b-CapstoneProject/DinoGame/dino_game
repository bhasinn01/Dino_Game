import pygame
import sys
import random
import os

class Dino:
    def __init__(self, screen, x, y):
        self.screen = screen
        self.x = x
        self.y = y
        self.image_jump = pygame.image.load("dino1.png")
        self.image_walk1 = pygame.image.load("dino2.png")
        self.image_walk2 = pygame.image.load("dino3.png")
        self.isjumping = False

        self.isducking = False
        self.image_duck1 = pygame.image.load("dino_ducking1.png")
        self.image_duck2 = pygame.image.load("dino_ducking2.png")
        self.duck = 0
        duck = [self.image_duck1]
        self.image_duck = duck[self.duck]

        self.v = 7
        self.m = 2
        self.is_dead = False
        self.image_dead1 = pygame.image.load("dino_dead1.png")
        self.image_dead2 = pygame.image.load("dino_dead2.png")
        self.dead_image = 0

        self.iswalking = 0
        walk = [self.image_jump]
        self.image = walk[self.iswalking]

    def jump(self):
        if self.isjumping:
            if self.v > 0:
                F = ((1/2) * self.m * (self.v * self.v))
            else:
                F = -((1/60) * self.m * (self.v * self.v))
            # Change position
            self.y = self.y - F
            # Change velocity
            self.v = self.v - 1
            # If ground is reached, reset variables.
            if self.y >= self.screen.get_height() - 74:
                self.y = self.screen.get_height() - 74
                self.isjumping = False
                self.v = 7

    def draw(self):
        if self.isjumping:
            self.image = self.image_jump
        elif self.isducking:
            duck = [self.image_duck1, self.image_duck1, self.image_duck1, self.image_duck1, self.image_duck1,
                    self.image_duck1, self.image_duck2, self.image_duck2, self.image_duck2, self.image_duck2,
                    self.image_duck2, self.image_duck2]
            self.duck = self.duck + 1
            if self.duck > 11:
                self.duck = 0
            self.image = duck[self.duck]
            self.isducking = False
        else:
            walk = [self.image_walk1, self.image_walk1, self.image_walk1, self.image_walk1, self.image_walk1,
                    self.image_walk1, self.image_walk2, self.image_walk2, self.image_walk2, self.image_walk2,
                    self.image_walk2, self.image_walk2]
            self.iswalking = self.iswalking + 1
            if self.iswalking > 11:
                self.iswalking = 0
            self.image = walk[self.iswalking]
        self.screen.blit(self.image, (self.x, self.y))

    def dead(self):
        dead = [self.image_dead1, self.image_dead1, self.image_dead1, self.image_dead1, self.image_dead1, self.image_dead1, self.image_dead2, self.image_dead2, self.image_dead2, self.image_dead2, self.image_dead2, self.image_dead2]
        while True:
            if self.dead_image >= 11:
                break
            self.dead_image = self.dead_image + 1
        self.image = dead[self.dead_image]
        self.screen.blit(self.image, (self.x, self.y))

class Ground:
    def __init__(self, screen, x, y):
        self.screen = screen
        self.x = x
        self.y = y
        self.image = pygame.image.load("ground.png")
        self.image2 = pygame.image.load("ground.png")
        self.speed = 7
        self.original_x = x

    def move(self, scoreboard):
        if (self.x < -1203):
            self.x = 0
        self.x = self.x - self.speed
        scoreboard.score = scoreboard.score + 1

    def draw(self):
        self.screen.blit(self.image, (self.x, self.y))
        self.screen.blit(self.image2, (self.x + 1203, self.y))

class Cloud:
    def __init__(self, screen, x):
        self.screen = screen
        self.image = pygame.image.load("Cloud.png")
        self.image2 = pygame.image.load("Cloud.png")
        self.image3 = pygame.image.load("Cloud.png")
        self.x = x
        self.y = random.randint(0, self.image.get_height())
        self.speed = 1
        self.image2_x = x + 300
        self.image3_x = x + 500
        self.image2_y = random.randint(0, (self.screen.get_height() / 2) - self.image.get_height())
        self.image3_y = random.randint(0, (self.screen.get_height() / 2) - self.image.get_height())

    def move(self):
        if (self.x < -self.image.get_width()):
            self.x = self.screen.get_width()
            self.y = random.randint(0, (self.screen.get_height() / 2) - self.image.get_height())
        self.x = self.x - self.speed
        if (self.image2_x < -self.image.get_width()):
            self.image2_x = self.screen.get_width()
            self.image2_y = random.randint(0, (self.screen.get_height() / 2) - self.image.get_height())
        self.image2_x = self.image2_x - self.speed
        if (self.image3_x < -self.image.get_width()):
            self.image3_x = self.screen.get_width()
            self.image3_y = random.randint(0, (self.screen.get_height() / 2) - self.image.get_height())
        self.image3_x = self.image3_x - self.speed

    def draw(self):
        self.screen.blit(self.image, (self.x, self.y))
        self.screen.blit(self.image, (self.image2_x, self.image2_y))
        self.screen.blit(self.image2, (self.image3_x, self.image3_y))

class Cacti_Big:
    def __init__(self, screen, x, y):
        self.screen = screen
        self.x = x
        self.y = y
        self.image = pygame.image.load("cacti-big1.png")
        self.image2 = pygame.image.load("cacti_big2.png")
        self.image3 = pygame.image.load("cacti_big4.png")
        self.speed = 7

        number_list1 = [self.image, self.image2, self.image3]
        self.display_number1 = random.choice(number_list1)

    def move(self):
        number_list1 = [self.image, self.image2, self.image3]
        if (self.x < -self.display_number1.get_width()):
            self.x = 2 * self.screen.get_width()
            self.display_number1 = random.choice(number_list1)
        self.x = self.x - self.speed

    def draw(self):
        self.screen.blit(self.display_number1, (self.x, self.y))

    def hit_by1(self, dino):
        hitbox = pygame.Rect(self.x, self.y, self.display_number1.get_width(), self.display_number1.get_height())
        return hitbox.collidepoint(dino.x, dino.y)



class Cacti_Small:
    def __init__(self, screen, x, y):
        self.screen = screen
        self.image4 = pygame.image.load("cacti_small1.png")
        self.image5 = pygame.image.load("cacti_small2.png")
        self.image6 = pygame.image.load("cacti_small3.png")
        self.speed = 7
        self.x = x
        self.y = y
        self.y2 = y - 20

        number_list2 = [self.image4, self.image5, self.image6]
        self.display_number2 = random.choice(number_list2)

    def move(self, big_cactus):
        if big_cactus.x - self.x < 100:
            self.x = self.screen.get_width() + 10
        number_list2 = [self.image4, self.image5, self.image6]
        if (self.x < -self.display_number2.get_width()):
            self.x = 2 * self.screen.get_width()
            self.display_number2 = random.choice(number_list2)
        self.x = self.x - self.speed

    def draw(self):
        self.screen.blit(self.display_number2, (self.x, self.y))

    def hit_by2(self, dino):
        hitbox2 = pygame.Rect(self.x, self.y2, self.display_number2.get_width(), self.display_number2.get_height())
        return hitbox2.collidepoint(dino.x, dino.y)

class Ptero:
    def __init__(self, screen, x, y):
        self.screen = screen
        self.x = x
        self.y = y
        self.image = pygame.image.load("ptero1.png")
        self.image2 = pygame.image.load("ptero2.png")
        self.speed = 7
        self.y2 = y + 30
        self.y3 = y + 55
        self.freeze = False

        display_position = [self.y, self.y2, self.y3]
        self.display_number = random.choice(display_position)
        self.isflying = 0
        fly = [self.image]
        self.fly_image = fly[self.isflying]

    def move(self, big_cactus):
        if big_cactus.x - self.x < 100:
            self.x = self.screen.get_width() + 400
        display_position = [self.y, self.y2, self.y3]
        if (self.x < -self.image.get_width()):
            self.x = 2 * self.screen.get_width() + 2150
            self.display_number = random.choice(display_position)
        self.x = self.x - self.speed

    def draw(self):
        fly = [self.image, self.image, self.image, self.image, self.image,
                self.image, self.image2, self.image2, self.image2, self.image2,
                self.image2, self.image2]
        self.isflying = self.isflying + 1
        if self.isflying > 11:
            self.isflying = 0
        self.fly_image = fly[self.isflying]
        if self.freeze:
            self.fly_image = self.image
        self.screen.blit(self.fly_image, (self.x, self.display_number))

    def hit_by(self, dino):
        hitbox = pygame.Rect(self.x, self.display_number, self.image.get_width(), self.image.get_height())
        return hitbox.collidepoint(dino.x, dino.y)

class Scoreboard:
    def __init__(self, screen):
        self.screen = screen
        self.score = 0
        self.original_score = 0
        self.font = pygame.font.Font("KemcoPixelBold.ttf", 20)
        self.color = (85, 85, 85)
        self.hi_score = 0
        self.range_increase = 600

    def update(self, ground, cloud, big_cacti, small_cacti, ptero):
        win_sound = pygame.mixer.Sound("win.wav")
        if self.score == self.original_score + 150:
            win_sound.play()
            cloud.speed = cloud.speed + 0.5
            ground.speed = ground.speed + 0.5
            big_cacti.speed = big_cacti.speed + 0.5
            small_cacti.speed = small_cacti.speed + 0.5
            ptero.speed = ptero.speed + 0.5
            self.original_score = self.score

    def draw(self):
        score_string = "Score {}".format(self.score)
        score_image = self.font.render(score_string, True, self.color)
        self.screen.blit(score_image, (self.screen.get_width() - score_image.get_width() - 5, 5))

        with open('score_file.txt', 'r') as file:
            self.hi_score = file.read()
            if self.score > int(self.hi_score):
                self.hi_score = self.score
            hi_score_string = "HI {}".format(self.hi_score)
            hi_score_image = self.font.render(hi_score_string, True, self.color)
            self.screen.blit(hi_score_image, (self.screen.get_width() - score_image.get_width() - hi_score_image.get_width() - 35, 5))

def main():
    pygame.init()
    # Screen title
    pygame.display.set_caption("Dino Game")
    # Screen size
    screen = pygame.display.set_mode((900, 250))
    # Clock
    clock = pygame.time.Clock()

    is_game_over = False

    cloud = Cloud(screen, random.randint(0, 500))
    ground = Ground(screen, 0, screen.get_height() - 21)
    big_cacti = Cacti_Big(screen, 500, screen.get_height() - 80)
    small_cacti = Cacti_Small(screen, 600, screen.get_height() - 60)
    ptero = Ptero(screen, screen.get_width() + 2050, 115)
    dino = Dino(screen, 30, screen.get_height() - 74)
    scoreboard = Scoreboard(screen)

    lose_sound = pygame.mixer.Sound("lose.wav")

    while True:
        clock.tick(60)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        screen.fill((235, 235, 235))
        increase_range = 1001
        if scoreboard.score > increase_range:
            increase_range = increase_range + 1000
        if scoreboard.score in range(increase_range - 401, increase_range):
                screen.fill((85, 85, 85))
                scoreboard.color = (235, 235, 235)
                ground.image = pygame.image.load("inverse_ground.png")
                ground.image2 = pygame.image.load("inverse_ground.png")
                game_over_image = pygame.image.load("inverse_game_over.png")
        else:
            ground.image = pygame.image.load("ground.png")
            ground.image2 = pygame.image.load("ground.png")
            game_over_image = pygame.image.load("game_over.png")
            scoreboard.color = (85, 85, 85)


        cloud.draw()
        ground.draw()
        big_cacti.draw()
        small_cacti.draw()
        scoreboard.draw()
        ptero.draw()

        if dino.is_dead:
            dino.dead()

        if is_game_over:
            with open('score_file.txt', 'w') as file:
                file.write(str(scoreboard.hi_score))
            screen.blit(game_over_image, ((screen.get_width() / 2) - (game_over_image.get_width() / 2), 100))
            pygame.display.update()
            continue

        pressed_keys = pygame.key.get_pressed()
        jump_sound = pygame.mixer.Sound("jump.wav")
        if dino.isjumping == False:
            if pressed_keys[pygame.K_SPACE] or pressed_keys[pygame.K_UP]:
                jump_sound.play()
                dino.isjumping = True
        dino.jump()

        if dino.isducking == False:
            if pressed_keys[pygame.K_DOWN]:
                    dino.isducking = True


        cloud.move()
        ground.move(scoreboard)
        big_cacti.move()
        small_cacti.move(big_cacti)
        scoreboard.update(ground, cloud, big_cacti, small_cacti, ptero)
        ptero.move(big_cacti)
        dino.draw()

        if big_cacti.hit_by1(dino):
            dino.is_dead = True
            is_game_over = True
            lose_sound.play()
            ptero.freeze = True
        elif small_cacti.hit_by2(dino):
            dino.is_dead = True
            is_game_over = True
            lose_sound.play()
            ptero.freeze = True
        elif ptero.hit_by(dino):
            dino.is_dead = True
            is_game_over = True
            lose_sound.play()
            ptero.freeze = True


        pygame.display.update()

main()

